var express = require('express');
var app = express();
var http = require('http').Server(app);
var io = require('socket.io')(http);

app.get('/', function(req, res){
    res.sendFile(__dirname + '/public/snatch_files/snatch.html');
});

app.use(express.static('public'));

var snatchSvr = require('./snatch-server.js');

var myGame = snatchSvr(50);//create a snatch game instance with 50 tiles...

io.on('connection', function(socket){

    //basic logging
    console.log('a user connected, with ID:'+socket.id);
    socket.on('disconnect', function(){
	//does a player with this socket ID still exist in the server's list anyway?
	if(myGame.playerWithSocketExists(socket.id)){
	    var disconnectedPlrName = myGame.getPlayerNameBySocket(socket.id);
	    socket.broadcast.emit('player disconnected',disconnectedPlrName);
	    myGame.removePlayer(socket.id);
	}
	console.log('user disconnected with ID'+socket.id);
    });

    //this is the first message a client will send...
    socket.on('player joining game', function (blank_msg){
	//respond by providing a set of colours to choose between
	console.log('player joining game message received by server');
	//this data structure needs to be generated by the myGame object...
	var colorSetStr = myGame.provideColorChoiceAsStr(socket.id);
	socket.emit('player color choices', colorSetStr);
    });

    //client provides player detials, which is also a request for the full game state
    socket.on('player joined with details', function (details_obj){
	//this newly joined player can be added to the game...
	//myGame.addPlater
	console.log('player joined with details : ' + details_obj);
	myGame.addPlayer(details_obj,socket.id);
	var gameObj = myGame.getGameObjectAsStr();
	socket.emit('full game state transmission', gameObj);
	console.log('the full game state was transmitted');
	var pl_i = myGame.playerIndexFromSocket(socket.id);
	socket.emit('give client their player index', pl_i);
	var playerAsStr = myGame.getPlayerObjectAsStr(socket.id);
	socket.broadcast.emit('player has joined game', playerAsStr);
    });

    socket.on('reset request', function (blank_msg){
	var all_one_agree = myGame.playerAgreesToReset(socket.id);
	if (all_one_agree){
	    myGame.resetGame(50);
	    //now sent out the new game object:
	    var gameObj = myGame.getGameObjectAsStr();
	    io.emit('full game state transmission', gameObj);
	}
	else{//in the case where there are other players...
	    var playerName = myGame.getPlayerNameBySocket(socket.id);
	    socket.broadcast.emit('player wants reset', playerName);
	}
    });

    //client requests to turn over a tile
    socket.on('agree to reset', function(agrees){
	var playerName = myGame.getPlayerNameBySocket(socket.id);
	var responseObjStr = JSON.stringify({playerName: playerName,response: agrees});
	socket.broadcast.emit('player response to reset request', responseObjStr);
	if(agrees){
	    var reset_agreement = myGame.playerAgreesToReset(socket.id);
	    if (reset_agreement){
		myGame.resetGame(50);
		//now sent out the new game object:
		var gameObj = myGame.getGameObjectAsStr();
		io.emit('full game state transmission', gameObj);
	    }
	}
    });


    socket.on('player submits word', function(snatchWordbyIndecesStr){
	console.log("snatch (new) with letters:"+snatchWordbyIndecesStr);
	myGame.playerSnatches(snatchWordbyIndecesStr,socket.id)
	//this is most definitely a hack, but for now handle by resending the entire game state
	//upon a player snatching
	var gameObj = myGame.getGameObjectAsStr();
	io.emit('full game state transmission', gameObj);
    });




    //client requests to turn over a tile
    socket.on('tile turn request', function(tileTurnDetailsObjStr){
	var tileID = JSON.parse(tileTurnDetailsObjStr).tileID;
	myGame.flipLetter(tileID);//note that in this handler we discard the knowledge of the player ID, as it stands.
	//however, in reflecting the message back to all clients, we do pass on that data
	io.emit('tile turn assert', tileTurnDetailsObjStr);
	console.log("<handler> Recieved from a client: " + tileTurnDetailsObjStr + " - data broadcast back to all clients...");
    });

});

http.listen(3008,'127.0.0.1');
console.log('Snatch server, listening on 127.0.0.1:3008');
